#! /usr/bin/bash
export LC_COLLATE=C
shopt -s extglob

database_dir="DataBase"
if [ ! -d "$database_dir" ]; then
    mkdir "$database_dir"
   
fi


function MainMenu {
  echo "#######################################"
  echo " 1. Create a new DataBase"
  echo " 2. Show or List your DataBase"
  echo " 3. Connect to your DataBases"
  echo " 4. Drop your DataBase"
  echo " 5. Exit The DataBase"
  echo "############################################"
  echo "Enter your choice:  "
  read choice
  case $choice in
    1)  createDataBase ;;
    2)  listDataBase ;;
    3)  connectDataBase ;;
    4)  DropDataBase ;;
    5) exit ;;
    *) echo " Wrong Choice  " ; MainMenu;
  esac
}
##################################################
function TableOptions {
  echo "##############################################"
  echo " 1. Create a Table"
  echo " 2. List the DataBase Tables"
  echo " 3. Drop a Table"
  echo " 4. Insert into your Tables"
  echo " 5. Select From your Tables"
  echo " 6. Delete From your Table"
  echo " 7. Update your Table"
  echo " 8. Main Menu"
  echo " 9. Exit DataBase"
  echo "###################################################"
  echo "Enter your choice:  "
  read choice
  case $choice in
    1) createTable  ;;
    2) Listtables ;;
    3) DropTable ;;
    4) InsertIntoTable ;;
    5) SelectTable ;;
    6) DeleteTable ;;
    7) Updatetable ;;
    8) MainMenu ;;
    9) exit ;;
    *) echo " Wrong Choice  " ; TableOptions;
  esac
}
##################################################
function createDataBase {
  echo "Enter Database Name: "
  read DataBaseName
  if [[ $DataBaseName = "" ]]
    	then
    	echo -e "Invalid, please enter correct name" 
	read -p "press any key "
  elif [[ $DataBaseName =~ [/.:\|\-] ]]
	then
	echo -e "Invalid,You can't enter any of these special characters . / : - | " 
	read -p "press any key "
  elif [[ $DataBaseName =~ ^[a-zA-Z] ]]
   	then
        if [[ ! -d ./DataBase/$DataBaseName ]]
	    then
	    mkdir ./DataBase/$DataBaseName
            echo "Database has been created successfully"
	else
	    echo  "Invalid, database already exist"
	fi
  else
	echo "Database name can't start with numbers or any special characters"
  fi
  MainMenu
}
##############################################
function connectDataBase {
  echo "Enter the desired Database Name: "
  read DataBaseName
  cd ./DataBase/$DataBaseName 2>>./.error.log
  if [[ $? == 0 ]]
  then
    echo "Connected Successfully to the desired Database " $DataBaseName
    TableOptions
  else
    echo "Database does not exist in the Directory"
   MainMenu
  fi
}


##################################################
function listDataBase {
  ls ./DataBase ;
  MainMenu
}
##################################################
function DropDataBase {

  # Ask the user for the desired database to drop
  echo "Enter the desired Database Name to drop:"
  read DataBaseName

  # Confirm with the user
  read -p "Are you sure you want to drop the database '$DataBaseName'? (y/n): " confirm
  if [[ "$confirm" == "y" ]]; then
    # Check if the database directory exists
    if [[ -d "./DataBase/$DataBaseName" ]]; then
      # Remove the database directory
      rm -r "./DataBase/$DataBaseName" 2>>"./.error.log"
      if [[ $? == 0 ]]; then
        echo "Database '$DataBaseName' has been dropped successfully."
      else
        echo "Failed to drop database '$DataBaseName'."
      fi
    else
      echo "Database '$DataBaseName' does not exist."
    fi
  elif [[ "$confirm" == "n" ]]; then
    echo "Database drop operation canceled."
  else
    echo "Invalid input. Please enter 'y' or 'n' to confirm or cancel."
  fi

  MainMenu
}



###########################################################
##########################################################
#tables options
###########################################################
#########################################################
function createTable {



  read -p "Enter Table Name: " TBName

  # Check if table name is valid
  if ! [[ $TBName =~ ^[A-Za-z_][A-Za-z0-9_]+$ ]]; then
    echo "Invalid table name."
    select op in "Try Again" "Exit"; do
      case $op in
        "Try Again")
          createTable
          return
          ;;
        "Exit")
          echo "Failed to create $TBName"
          TableOptions
          ;;
      esac
    done
  fi

  # Checking if table already exists
  if [[ -f "${TBName}_metadata.txt" ]]; then
    echo "Table '$TBName' already exists."
    select op in "Try Again" "Exit"; do
      case $op in
        "Try Again")
          createTable
          return
          ;;
        "Exit")
          echo "Failed to create $TBName"
          TableOptions
          ;;
      esac
    done
  fi



  numColumns=""
  while [[ ! $numColumns =~ ^[1-9][0-9]*$ ]]; do
    read -p "Please enter the number of columns you want in your table (excluding the primary key): " numColumns

    if ! [[ $numColumns =~ ^[1-9][0-9]*$ ]]; then
      echo "Invalid number of columns."
      select op in "Try Again" "Exit"; do
        case $op in
          "Try Again")
            break
            ;;
          "Exit")
            echo "Failed to create $TBName"
            TableOptions
            ;;
        esac
      done
    fi
  done

  tableRecord=""
  PKColumnName=""
  PKColumnType=""
  validOptions=("string" "number")

  while [[ -z $PKColumnName || ! $PKColumnName =~ ^[A-Za-z_][A-Za-z0-9_]+$ ]]; do
    read -p "Enter name for primary key column: " PKColumnName

    if [[ -z $PKColumnName ]]; then
      select op in "Try Again" "Exit"; do
        case $op in
          "Try Again")
            break
            ;;
          "Exit")
            echo "Failed to create $TBName"
            TableOptions
            ;;
        esac
      done
    elif [[ ! $PKColumnName =~ ^[A-Za-z_][A-Za-z0-9_]+$ ]]; then
      echo "Invalid primary key column name."
      select op in "Try Again" "Exit"; do
        case $op in
          "Try Again")
            break
            ;;
          "Exit")
            echo "Failed to create $TBName"
            TableOptions
            ;;
        esac
      done
    fi
  done

  tableRecord="${PKColumnName}"

  dataType=""
  while [[ -z $dataType || ! " ${validOptions[@]} " =~ " $dataType " ]]; do
    select dataType in "string" "number"  "Exit"; do
      case $dataType in
        "string")
          tableRecord="${tableRecord}:string"
          break
          ;;
        "number")
          tableRecord="${tableRecord}:number"
          break
          ;;
        "Exit")
          echo "Failed to create $TBName"
          TableOptions
          ;;
        *)
          echo "Invalid option."
          ;;
      esac
    done
  done

  PKColumnType=$dataType

  for ((i = 1; i <= numColumns; i++)); do
    columnName=""
    while [[ -z $columnName || $tableRecord == $columnName || ! $columnName =~ ^[A-Za-z_][A-Za-z0-9_]+$ ]]; do
      read -p "Enter name for column $((i + 1)): " columnName

      if [[ -z $columnName ]]; then
        select op in "Try Again" "Exit"; do
          case $op in
            "Try Again")
              break
              ;;
            "Exit")
              echo "Failed to create $TBName"
              TableOptions
              ;;
          esac
        done
      elif [[ $tableRecord == $columnName || ! $columnName =~ ^[A-Za-z_][A-Za-z0-9_]+$ ]]; then
        echo "Invalid column name. Column names must be unique and follow naming conventions."
        select op in "Try Again" "Exit"; do
          case $op in
            "Try Again")
              break
              ;;
            "Exit")
              echo "Failed to create $TBName"
              TableOptions
              ;;
          esac
        done
      else
        break
      fi
    done

    if [[ -z $columnName ]]; then
      continue
    fi

    tableRecord="${tableRecord}:${columnName}"

    select dataType in "string" "number" "Exit"; do
      case $dataType in
        "string")
          tableRecord="${tableRecord}:string"
          break
          ;;
        "number")
          tableRecord="${tableRecord}:number"
          break
          ;;
        "Exit")
          echo "Failed to create $TBName"
          TableOptions
          ;;
        *)
          echo "Invalid option."
          ;;
      esac
    done
  done

  # Create metadata and data files for the table
  metadataFile="${TBName}_metadata.txt"
  dataFile="${TBName}_data.txt"

  touch "$metadataFile"
  touch "$dataFile"

  # Appending the table metadata to the metadata file
  echo "$tableRecord" >> "$metadataFile"

  echo "$TBName Table has been created successfully"



  
TableOptions
}
##################################################
function InsertIntoTable {
  
  while true; do
    # Prompt the user for the table name
    read -p "Enter the name of the table to insert data into (or 'exit' to quit): " TBName

    if [[ "$TBName" == "exit" ]]; then
      TableOptions  # Exit the function if the user chooses to exit
    elif [[ ! -f "${TBName}_metadata.txt" ]]; then
      echo "Table '$TBName' does not exist. Please try again."
    else
      break  # Exit the loop if a valid table name is provided
    fi
  done

  # Read the table metadata to determine column names and data types
  IFS=':' read -r -a columns < "${TBName}_metadata.txt"

  # Initialize a variable to store the primary key value
  primaryKey=""

  # Get the primary key column name and data type from the metadata
  PKColumnName="${columns[0]}"
  PKColumnType="${columns[1]}"

  while true; do
    # Prompt the user for the primary key value
    read -p "Enter the primary key value (Name: $PKColumnName ) and (type: $PKColumnType): " primaryKeyValue

    # Check if the primary key value already exists in the data file
    dataFile="${TBName}_data.txt"
    if grep -q "^$primaryKeyValue:" "$dataFile"; then
      echo "Primary key value '$primaryKeyValue' already exists. Please enter another one."
    elif [[ "$PKColumnType" == "number" && ! "$primaryKeyValue" =~ ^[0-9]+$ ]]; then
      echo "Invalid input. Primary key value must be a number."
    elif [[ "$PKColumnType" == "string" && -z "$primaryKeyValue" ]]; then
      echo "Invalid input. '$PKColumnName' cannot be empty."
    elif [[ ! "$primaryKeyValue" =~ ^[A-Za-z0-9_]+$ ]]; then
      echo "Invalid input. Special characters are not allowed in the primary key."
    else
      primaryKey="$primaryKeyValue"
      break
    fi
  done

  # Initialize an array to store the data in order
  dataArray=()

  # Iterate through the remaining columns
  for ((i = 2; i < ${#columns[@]}; i += 2)); do
    columnName="${columns[i]}"
    dataType="${columns[i + 1]}"
    
    while true; do
      read -p "Enter data for column '$columnName' (type: $dataType): " data
      
      # Validate data based on the data type
      if [[ "$dataType" == "number" && ! "$data" =~ ^[0-9]+$ ]]; then
        echo "Invalid input. Please enter a number for '$columnName'."
      elif [[ "$dataType" == "string" && -z "$data" ]]; then
        echo "Invalid input. '$columnName' cannot be empty."
      elif [[ "$dataType" == "string" && "$data" =~ ^[0-9]+$ ]]; then
        echo "Invalid input. '$columnName' cannot contain numbers."
      elif [[ ! "$data" =~ ^[A-Za-z0-9_]+$ ]]; then
        echo "Invalid input. Special characters are not allowed in the data."
      else
        # Data is valid, store it in the dataArray
        dataArray+=("$data")
        break
      fi
    done
  done

  # Construct the data record
  dataRecord="$primaryKey:${dataArray[*]}"
  dataRecord="${dataRecord// /:}"

  # Append the data record to the data file
  dataFile="${TBName}_data.txt"
  echo "$dataRecord" >> "$dataFile"

  echo "Data has been successfully inserted into '$TBName'."
  TableOptions
}
#################################################
function Listtables {

  if [[ -n $(find . -maxdepth 1 -type f)  ]]
  then
	echo "Tables are:"
	for file in *_data.txt; 
	do
  	  echo "${file%_data.txt}"
	done
  else
    echo "No Tables found"
  fi
TableOptions
}
#################################################
function DropTable {
  


  echo "Enter the desired Table Name:"
  read TBName 

  if [[ -f "${TBName}_metadata.txt" ]]; then
    # Confirm with the user
    read -p "Are you sure you want to drop the table '$TBName'? (y/n): " confirm
    if [[ "$confirm" == "y" ]]; then
      rm "${TBName}_metadata.txt"
      rm "${TBName}_data.txt"
      echo "Table '$TBName' has been deleted successfully."
    elif [[ "$confirm" == "n" ]]; then
      echo "Table drop operation canceled."
    else
      echo "Invalid input. Please enter 'y' or 'n' to confirm or cancel."
    fi
  else
    echo "Table does not exist in the DataBase."
  fi

  TableOptions
}





#################################################
function Updatetable {
  while true; do
    echo "Enter table name to update row (or 'exit' to cancel): "
    read TBName

    if [[ "$TBName" == "exit" ]]; then
      echo "Update canceled."
      TableOptions
    elif [[ ! -f "${TBName}_metadata.txt" ]]; then
      echo "Table '$TBName' does not exist."
    else
      break  # Exit the loop if a valid table name is provided
    fi
  done

  echo "Enter the pk of the row to change: "
  read primaryKey

  PK=$(grep -n "^$primaryKey:" "${TBName}_data.txt" | cut -d: -f1)

  # Check if no retrieval value
  if [[ -z $PK ]]; then
    echo "This pk '$primaryKey' not found in '$TBName'."
    TableOptions
  fi

  read -p "Are you sure you want to update row with primary key '$primaryKey' in '$TBName'? (yes/no): " confirm
  if [[ "$confirm" != "yes" ]]; then
    echo "Changes canceled."
    TableOptions
  fi

  # Read the table metadata column names and data types
  tableMetadata=$(cat "${TBName}_metadata.txt")
  IFS=':' read -r -a columns <<< "$tableMetadata"
  NewDataRow=""

  # Prompt the user to update each column in the row
  for ((i = 0; i < ${#columns[@]}; i += 2)); do
    columnName="${columns[i]}"
    dataType="${columns[i + 1]}"
    currentDataRow=$(awk "NR==$PK{print \$i}" "${TBName}_data.txt")
while true; do
    echo "Current row data: $currentDataRow"
    echo "Current column name $columnName it is a/an $dataType"
    echo "Enter new $columnName ($dataType): "
    read newData

    # Validate data based on the data type
    if [[ "$dataType" == "number" && ! "$newData" =~ ^[0-9]+$ ]]; then
      echo "Invalid input. Please enter a number for '$columnName'."
    elif [[ "$dataType" == "string" && -z "$newData" ]]; then
      echo "Invalid input. '$columnName' cannot be empty."
    else
	if [[ $i -ne 0 ]]; then
           NewDataRow+=":"
        fi

        NewDataRow+="$newData"
         break
    fi
done
  done

  # Update the data in the row
  sed -i "s|^${currentDataRow}$|${NewDataRow}|" "${TBName}_data.txt"
  echo "Row with primary key '$primaryKey' in '$TBName' has been updated."
  TableOptions
}
###########################################################################
# Function to delete from table with specific options
function DeleteTable {
  while true; do
    read -p "Enter the name of the table (or 'exit' to cancel): " TBName

    if [[ "$TBName" == "exit" ]]; then
      echo "Operation canceled."
      TableOptions
    fi

    table_file="./${TBName}_data.txt"

    # Check if the table file exists
    if [[ ! -f "$table_file" ]]; then
      echo "Table '$TBName' does not exist. Please enter a valid table name or 'exit' to cancel."
    else
      break
    fi
  done
#################################################
  # Function to display all data on table
function displayTable {
  echo "Table '$TBName':"

  # Read the table metadata column names and data types
  tableMetadata=$(cat "${TBName}_metadata.txt")
  IFS=':' read -r -a columns <<< "$tableMetadata"

  # Construct the header by concatenating column names with colons
  header=""
  for ((i = 0; i < ${#columns[@]}; i += 2))
  do
    column_name="${columns[i]}"
    header+=":$column_name"
  done

  # Remove the leading colon from the header
  header="${header:1}"

  # Display all data including the columns name
    column -t -s ":" <(echo "$header") "${TBName}_data.txt" 
}
 
  while true; do
    echo "---------------------------"
    echo " 1. Display Table"
    echo " 2. Delete Record"
    echo " 3. Delete All Data"
    echo " 4. Tables Options"
    echo "---------------------------"
    read -p "Enter your choice: " choice
    case $choice in
      1)
        displayTable
        ;;
      2)
        deleteRow
        ;;
      3)
        deleteAll
        ;;
      4)
        TableOptions
        ;;
      *)
        echo "Invalid choice. Please try again." ;;
    esac
  done
}

################################################
# Function to delete a row by primary key num

function deleteRow {
  while true; do
    read -p "Enter the primary key value of the row to delete (or 'exit' to cancel): " primaryKeyValue

    if [[ "$primaryKeyValue" == "exit" ]]; then
      echo "Deletion canceled."
      return
    fi

    # Check if the primary key value exists in the data file
    if grep -q "^$primaryKeyValue:" "./${TBName}_data.txt"; then
      echo "Are you sure you want to delete the row with primary key '$primaryKeyValue'? (yes/no): "
      read confirm

      if [[ "$confirm" == "yes" ]]; then
        # Use grep to exclude the row with the primary key value and create a new data file
        grep -v "^$primaryKeyValue:" "./${TBName}_data.txt" > "./${TBName}_data_new.txt"

        # Rename the new data file to replace the original data file
        mv "./${TBName}_data_new.txt" "./${TBName}_data.txt"

        echo "Row with primary key '$primaryKeyValue' deleted."
        TableOptions
      else
        echo "Deletion canceled."
        TableOptions
      fi
    else
      echo "Row with primary key '$primaryKeyValue' not found. Please enter a valid primary key."
    fi
  done
}


##########################################################
# Function to delete all data from the table
function deleteAll {
  read -p "Are you sure you want to delete all data from the table '$TBName'? (yes/no): " confirm
  if [[ "$confirm" == "yes" ]]; then
    > "./${TBName}_data.txt"
    echo "All data deleted from the table."
  else
    echo "Operation canceled."
  fi
}
################################################################


function SelectTable {
     while true; do
        read -p "Enter the name of the table (or 'exit' to cancel): " TBName

        if [[ "$TBName" == "exit" ]]; then
            echo "Selection canceled."
            TableOptions
        fi

        if [[ ! -f "${TBName}_metadata.txt" ]]; then
            echo "Table '$TBName' does not exist. Please enter a valid table name or 'exit' to cancel."
        else
            break  # Exit the loop if a valid table name is provided
        fi
    done

select choice in "SelectAll" "selectRows"  "Exit"; do
    case $REPLY in
    1) SelectAll ;;
    2) selectFromTable;;
    3)  TableOptions ;;
    *) echo " Wrong Choice  " ; TableOptions ;;
    esac
done
}


function SelectAll {
 

  # Read the table metadata column names and data types
  tableMetadata=$(cat "${TBName}_metadata.txt")
  IFS=':' read -r -a columns <<< "$tableMetadata"

  # Construct the header by concatenating column names with colons
  header=""
  for ((i = 0; i < ${#columns[@]}; i += 2))
  do
    column_name="${columns[i]^^}"
    header+=":$column_name"
  done

  # Remove the leading colon from the header
  header="${header:1}"


  # Display the formatted data using column separator ':'
  column -t -s ":" <(echo "$header") "${TBName}_data.txt"
}





function selectFromTable {


    while true; do 
        read -p "Select <Field name>: " fieldname
        # Read the table metadata column names and data types
        tableMetadata=$(cat "${TBName}_metadata.txt")
        IFS=':' read -r -a columns <<< "$tableMetadata"

        # Initialize FieldNum to -1 to indicate no match found
        FieldNum=-1

        # Find the index of the selected field in the metadata
        for ((index = 0; index < ${#columns[@]}; index += 2)); do
            column_name="${columns[index]}"
            if [[ "$fieldname" == "$column_name" ]]; then 
                FieldNum=$((index / 2 + 1))
                break
            fi
        done

        # Check if the selected field was found in the metadata
        if [ "$FieldNum" -eq -1 ]; then
            echo "Invalid field name. Please try again."
        else
            break
        fi
    done

    while true; do
        read -p "Where [$fieldname] equals: " FieldValue

        # Allow non-numeric values for FieldValue
        if [ -n "$FieldValue" ]; then 
            break
        fi
    done

    header=""
    for ((i = 0; i < ${#columns[@]}; i += 2)); do
        header+=$(echo "${columns[i]^^},")
    done

    echo "-------------Output data in table-------------"
    echo "$header" | column -t -s ","

    # Extract the selected column and its values
    awk -F: -v fnum="$FieldNum" -v fvalue="$FieldValue" -v OFS="|" 'BEGIN{print header} $fnum==fvalue{print $0}' "${TBName}_data.txt"| column -t -s ":"

    echo "----------------------------------------------------------------------"
}

 
MainMenu